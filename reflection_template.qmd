---
title: "STAT 331 Portfolio"
author: "Lisette Abundez"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
#Lab 2 Question 1
library(here)

surveys <- read_csv(here("data", "surveys.csv"))
```

-   

-   `xlsx`

```{r}
#| label: wd-1-xlsx
#Check-in 2:3: Importing Data, Question 5
agesxl <- read_xlsx(path = here::here("check-ins", "2.1-loading-data", "Ages_Data", "ages.xlsx"), sheet = "ages")
```

-   `txt`

```{r}
#| label: wd-1-txt
#Check-in 2:3: Importing Data, Question 3
ages_tab <- read_table(file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
#Lab 3, Quesiton 5
teacher_evals_clean <- evals|>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    across(c(teacher_id, 
             question_no, 
             seniority), 
           as.character)
            ) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority, 
         sex)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
#Lab 3, Quesiton 5

teacher_evals_clean <- evals|>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    across(c(teacher_id, 
             question_no, 
             seniority), 
           as.character)
            ) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority, 
         sex)
  
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#Lab 5, Tracking Second Witness
person |>
  inner_join(interview, 
             by = join_by(id == person_id)
             ) |>
  filter(str_detect(name, "^Annabel"),
         address_street_name == "Franklin Ave") |>
  pull(transcript)

```

-   factor

```{r}
#| label: wd-3-factor
#Lab 5, Pulling crime scene report

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(date == "2018-01-15",
         city == "SQL City",
         type == "murder") |>
  pull(description) 

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
#Lab 5, Pulling crime scene report

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(date == "2018-01-15",
         city == "SQL City",
         type == "murder") |>
  pull(description) 

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric
#Challenge 3, Question 1

teacher_evals_compare <- teacher_evals_clean |>
  filter(question_no == 903) |>
  mutate(
    SET_level = ifelse(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = ifelse(seniority <= 4, "junior", "senior")) |>
    select(course_id, SET_level, sen_level)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
#Lab 5, Finding interview for witness #2

person |>
  inner_join(interview, 
             by = join_by(id == person_id)
             ) |>
  mutate(first_name = word(name, 1)
         ) |>
  filter(first_name == "Annabel",
         address_street_name == "Franklin Ave") |>
  pull(transcript)

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor
#Lab 4, Question 3

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(
    region = fct_collapse(county_name,
                      "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
      "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
      "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
      "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
      "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
      "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
      "Inland Empire" = c("Riverside", "San Bernardino"),
      "Los Angeles" = c("Los Angeles"),
      "Orange" = c("Orange"),
      "San Diego - Imperial" = c("Imperial", "San Diego")
    )
  )
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#Lab 5, Pulling crime scene report

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(date == "2018-01-15",
         city == "SQL City",
         type == "murder") |>
  pull(description) 
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left
#Lab 5, Find who hired initial suspect

facebook_event_checkin |>
  left_join(person,
             by = join_by(person_id == id)
             ) |>
  inner_join(drivers_license,
             by = join_by(license_id == id )
              ) |>
  filter(hair_color == "red",
           car_make == "Tesla",
           car_model == "Model S",
           event_name == "SQL Symphony Concert")

```

-   `right_join()`

```{r}
#| label: wd-5-right
#Lab 5, Finding Initial Suspect

get_fit_now_check_in |>
    right_join(get_fit_now_member,
               by = join_by(membership_id == id)
               )|>
    inner_join(person,
               by = join_by(person_id == id,
                            name == name)
               ) |>
    inner_join(drivers_license,
               by = join_by(license_id == id)
               ) |>
    filter(check_in_date == 20180109,
          str_detect(membership_id, "^48Z"),
          str_detect(plate_number, "H42W"))
```

-   `inner_join()`

```{r}
#| label: wd-5-inner
#Lab 5, Finding Initial Suspect

get_fit_now_check_in |>
    right_join(get_fit_now_member,
               by = join_by(membership_id == id)
               )|>
    inner_join(person,
               by = join_by(person_id == id,
                            name == name)
               ) |>
    inner_join(drivers_license,
               by = join_by(license_id == id)
               ) |>
    filter(check_in_date == 20180109,
          str_detect(membership_id, "^48Z"),
          str_detect(plate_number, "H42W"))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#Lab 3, Question 12

eligible_instructors <- tibble(academic_degree = c("dr", "prof"),
                               sex = "female")

highest_avg_pct <- teacher_evals_clean |>
  semi_join(eligible_instructors, by = c("academic_degree", "sex")) |>
  group_by(teacher_id) |>
  summarise(avg_participants = mean(no_participants, na.rm = TRUE)) |>
  slice_min(avg_participants)

non_eligible_instructors <- tibble(academic_degree = c("ma", "no_dgr"),
                                   sex = "male")

lowest_avg_pct <- teacher_evals_clean |>
  anti_join(eligible_instructors, by = c("academic_degree", "sex")) |>
  group_by(teacher_id) |>
  summarise(avg_participants = mean(no_participants, na.rm = TRUE)) |>
  slice_max(avg_participants)

#Revised for the purpose of fulfilling semi-join and anti-join requirement. I previously filtered within the teacher_evals_clean dataset, but I made a new dataset with filter requirements in order to use semi-join and anti-joins. 
```

-   
-   `anti_join()`

```{r}
#| label: wd-6-anti

#Lab 3, Question 12

eligible_instructors <- tibble(academic_degree = c("dr", "prof"),
                               sex = "female")

highest_avg_pct <- teacher_evals_clean |>
  semi_join(eligible_instructors, by = c("academic_degree", "sex")) |>
  group_by(teacher_id) |>
  summarise(avg_participants = mean(no_participants, na.rm = TRUE)) |>
  slice_min(avg_participants)

non_eligible_instructors <- tibble(academic_degree = c("ma", "no_dgr"),
                                   sex = "male")

lowest_avg_pct <- teacher_evals_clean |>
  anti_join(eligible_instructors, by = c("academic_degree", "sex")) |>
  group_by(teacher_id) |>
  summarise(avg_participants = mean(no_participants, na.rm = TRUE)) |>
  slice_max(avg_participants)

#Revised for the purpose of fulfilling semi-join and anti-join requirement. I previously filtered within the teacher_evals_clean dataset, but I made a new dataset with filter requirements in order to use semi-join and anti-joins. 
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#Lab 4, Question 6

ca_childcare |> 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "care_type",
               values_to = "median_price") |>
  mutate(
    care_type = fct_relevel(care_type, "mc_infant", "mc_toddler", "mc_preschool")
  ) |>
 ggplot(mapping = aes(x = study_year, 
                      y = median_price,
                      color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = median_price), 
                                          group = region)) +
  geom_point() +
  geom_smooth() +
  facet_grid(~ care_type,labeller = as_labeller(c("mc_infant" = "Infants",
                                                  "mc_toddler" = "Toddlers",
                                                  "mc_preschool" = "Preschool"))) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     labels = seq(2008, 2018, by = 2)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "Region"
  ) +
theme_bw() +
  theme(
    text = element_text(size = 8),         
    strip.text = element_text(size = 9),   
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 10),
    aspect.ratio = 1)

#Revised. Reodered facets and legend using fct_reorder2() and fct_relevel(). Eliminated intermediate objects so that it is one pipeline. Also, used ChatGPT to problem solve errors while using colorRampPalette(). [https://chatgpt.com/share/67560470-673c-800e-9d04-d64f9c58f50a]
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4, Question 4

income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  rename(
    "Median Income in 2008 (2018 Dollars)" = `2008`,
    "Median Income in 2018 (2018 Dollars)" = `2018`
  ) |>
  arrange(`Median Income in 2018 (2018 Dollars)`)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Challenge 7 and Lab 8!

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#Lab 2, Question 4

ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~ species) +
  labs(x = "Weight (g)",
       y = NULL, 
       title = "Weight (g) vs. Hindfoot Length (mm) by Animal Species",
       subtitle = "Hindfoot Length (mm)")

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 3, Question 5

teacher_evals_clean <- evals|>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    across(c(teacher_id, 
             question_no, 
             seniority), 
           as.character)
    ) |>
  select(course_id, 
         teacher_id, 
         question_no,
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree,
         seniority, 
         sex)

```

-   Example of function formatting

```{r}
#| label: r-2-3
#Challenge 7, Question 3

condition_index <- function(weight, length) {
  if(!is.numeric(weight) | !is.numeric(length)) {
    stop("Error: Weight and Length must be numeric values")
  }
  CI <- (weight / (length^3)) * 100
  return(CI)
}

#Revised to only use one bar in my if() statement, whereas previously I had a double bar. A single bar is in better alignment with the logic I am trying to execute. 
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example
# Lab 3, Question 12

teacher_evals_clean |>
  filter(academic_degree %in% c("dr", "prof")) |>
  filter(sex == "female") |>
  group_by(teacher_id) |>
  summarise(avg_participants = mean(no_participants, na.rm = TRUE)) |>
  slice_min(avg_participants)

teacher_evals_clean |>
  filter(academic_degree %in% c("dr", "prof")) |>
  filter(sex == "female") |>
  group_by(teacher_id) |>
  summarise(avg_participants = mean(no_participants, na.rm = TRUE)) |>
  slice_max(avg_participants)

#This is a revision, as I implmeted the use of slice_min() and slice_max(). 
```

-   Example of function stops

```{r}
#| label: r-3-function-stops
# Challenge 7, Question 3

condition_index <- function(weight, length) {
  if(!is.numeric(weight) | !is.numeric(length)) {
    stop("Error: Weight and Length must be numeric values")
  }
  CI <- (weight / (length^3)) * 100
  return(CI)
}

#Revised to only use one bar in my if() statement, whereas previously I had a double bar. A single bar is in better alignment with the logic I am trying to execute. 
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 2, Question 4

ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~ species) +
  labs(x = "Weight (g)",
       y = NULL, 
       title = "Weight (g) vs. Hindfoot Length (mm) by Animal Species",
       subtitle = "Hindfoot Length (mm)")
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Lab 2, Question 16

ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(color = "steelblue", alpha = 0.01) +
   labs(x = "Weight (g)",
       y = NULL, 
       title = "Weight (g) vs. Hindfoot Length (mm) by Animal Species",
       subtitle = "Hindfoot Length (mm)") +
  annotate("text", 
           label = "Albigia species has the largest range!", 
           x = 200,  
           y = "baileyi",  
           color = "red", 
           size = 4, 
           fontface = "italic")  

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
#Challenge 3, Question 2

ggplot(teacher_evals_compare, aes(x = sen_level, fill = SET_level)) +
  geom_bar() + 
  labs(
    title = "Number of Sections by Seniority and SET Level",
    x = "Seniority of Instructor",
    y = NULL,
    subtitle  = "Number of Sections") +
  scale_fill_manual(values = c("excellent" = "blue", "standard" = "orange"))


```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date
#Lab 4, Question 6

ca_childcare |> 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "care_type",
               values_to = "median_price") |>
  mutate(
    care_type = fct_relevel(care_type, "mc_infant", "mc_toddler", "mc_preschool")
  ) |>
 ggplot(mapping = aes(x = study_year, 
                      y = median_price,
                      color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = median_price), 
                                          group = region)) +
  geom_point() +
  geom_smooth() +
  facet_grid(~ care_type,labeller = as_labeller(c("mc_infant" = "Infants",
                                                  "mc_toddler" = "Toddlers",
                                                  "mc_preschool" = "Preschool"))) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     labels = seq(2008, 2018, by = 2)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "Region"
  ) +
theme_bw() +
  theme(
    text = element_text(size = 8),         
    strip.text = element_text(size = 9),   
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 10),
    aspect.ratio = 1)

#Revised. Reodered facets and legend using fct_reorder2() and fct_relevel(). Eliminated intermediate objects so that it is one pipeline. Also, used ChatGPT to problem solve errors while using colorRampPalette(). [https://chatgpt.com/share/67560470-673c-800e-9d04-d64f9c58f50a]
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
#Challenge 2, Medium

ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_density_ridges() +
  geom_jitter(color = "steelblue", alpha = 0.01, width = 0.2, height = 0.2) +
   labs(x = "Weight (g)",
       y = NULL, 
       title = "Weight (g) vs. Hindfoot Length (mm) by Animal Species",
       subtitle = "Hindfoot Length (mm)")

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
#Lab 4, Question 6

ca_childcare |> 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "care_type",
               values_to = "median_price") |>
  mutate(
    care_type = fct_relevel(care_type, "mc_infant", "mc_toddler", "mc_preschool")
  ) |>
 ggplot(mapping = aes(x = study_year, 
                      y = median_price,
                      color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = median_price), 
                                          group = region)) +
  geom_point() +
  geom_smooth() +
  facet_grid(~ care_type,labeller = as_labeller(c("mc_infant" = "Infants",
                                                  "mc_toddler" = "Toddlers",
                                                  "mc_preschool" = "Preschool"))) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     labels = seq(2008, 2018, by = 2)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "Region"
  ) +
theme_bw() +
  theme(
    text = element_text(size = 8),         
    strip.text = element_text(size = 9),   
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 10),
    aspect.ratio = 1)

#Revised. Reodered facets and legend using fct_reorder2() and fct_relevel(). Eliminated intermediate objects so that it is one pipeline. Also, used ChatGPT to problem solve errors while using colorRampPalette(). [https://chatgpt.com/share/67560470-673c-800e-9d04-d64f9c58f50a]
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
#Lab 4, Question 6

ca_childcare |> 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "care_type",
               values_to = "median_price") |>
  mutate(
    care_type = fct_relevel(care_type, "mc_infant", "mc_toddler", "mc_preschool")
  ) |>
 ggplot(mapping = aes(x = study_year, 
                      y = median_price,
                      color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = median_price), 
                                          group = region)) +
  geom_point() +
  geom_smooth() +
  facet_grid(~ care_type,labeller = as_labeller(c("mc_infant" = "Infants",
                                                  "mc_toddler" = "Toddlers",
                                                  "mc_preschool" = "Preschool"))) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     labels = seq(2008, 2018, by = 2)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "Region"
  ) +
theme_bw() +
  theme(
    text = element_text(size = 8),         
    strip.text = element_text(size = 9),   
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 10),
    aspect.ratio = 1)

#Revised. Reodered facets and legend using fct_reorder2() and fct_relevel(). Eliminated intermediate objects so that it is one pipeline. Also, used ChatGPT to problem solve errors while using colorRampPalette(). [https://chatgpt.com/share/67560470-673c-800e-9d04-d64f9c58f50a]
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
#Lab 4, Question 6

ca_childcare |> 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "care_type",
               values_to = "median_price") |>
  mutate(
    care_type = fct_relevel(care_type, "mc_infant", "mc_toddler", "mc_preschool")
  ) |>
 ggplot(mapping = aes(x = study_year, 
                      y = median_price,
                      color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = median_price), 
                                          group = region)) +
  geom_point() +
  geom_smooth() +
  facet_grid(~ care_type,labeller = as_labeller(c("mc_infant" = "Infants",
                                                  "mc_toddler" = "Toddlers",
                                                  "mc_preschool" = "Preschool"))) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     labels = seq(2008, 2018, by = 2)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "Region"
  ) +
theme_bw() +
  theme(
    text = element_text(size = 8),         
    strip.text = element_text(size = 9),   
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 10),
    aspect.ratio = 1)

#Revised. Reodered facets and legend using fct_reorder2() and fct_relevel(). Eliminated intermediate objects so that it is one pipeline. Also, used ChatGPT to problem solve errors while using colorRampPalette(). [https://chatgpt.com/share/67560470-673c-800e-9d04-d64f9c58f50a]
```

-   I can use annotations

```{r}
#| label: dvs-3-2
# Lab 2, Question 16

ggplot(data = surveys,
       mapping = aes(x = weight, y = species)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(color = "steelblue", alpha = 0.01) +
   labs(x = "Weight (g)",
       y = NULL, 
       title = "Weight (g) vs. Hindfoot Length (mm) by Animal Species",
       subtitle = "Hindfoot Length (mm)") +
  annotate("text", 
           label = "Albigia species has the largest range!", 
           x = 200, 
           y = "baileyi", 
           color = "red", 
           size = 4, 
           fontface = "italic") 

#Revised to include annotation.
```

-   I can be creative...

```{r}
#| label: dvs-3-3
#Challenge 3, Question 2

ggplot(teacher_evals_compare, aes(x = sen_level, fill = SET_level)) +
  geom_bar() + 
  labs(
    title = str_c("Number of Sections by Seniority and SET Level: ",
      "<span style = 'color:blue'>**Excellent**</span>",
      " and <span style = 'color:orange'>**Standard**</span>"),
    x = "Seniority of Instructor",
    y = NULL,
    subtitle  = "Number of Sections") +
  scale_fill_manual(values = c("excellent" = "blue", "standard" = "orange")) +
  theme_minimal() +
  theme(
    plot.title = ggtext::element_markdown(size = 14),
    legend.position = "none"
  )

#Revised to remove legend put color in title. 
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#Lab 4, Question 4

income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'keep') |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  rename(
    "Median Income in 2008 (2018 Dollars)" = `2008`,
    "Median Income in 2018 (2018 Dollars)" = `2018`
  ) |>
  arrange(`Median Income in 2018 (2018 Dollars)`)

#Revised. Based on feedback to give column names better titles, I used the rename() function to better name the two income columns. And revised to keep groups rather than drop.
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#Created an example for Lab 3

teacher_evals_clean |>
    summarise(across(everything(), ~ sum(is.na(.))
                     ) 
              )

#Because of having Lab 7 unable to use, I wanted to display my ability to calculate numerical summaries of variables in Lab 3, with the teachers evaluations dataset. This code chunk tell us that all variables have 0 NA values, except percent_failed_cur has 7 missing values. 
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#Lab 4, Question 4

income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  rename(
    "Median Income in 2008 (2018 Dollars)" = `2008`,
    "Median Income in 2018 (2018 Dollars)" = `2018`
  ) |>
  arrange(`Median Income in 2018 (2018 Dollars)`)
```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 4, Question 5

lowest_mc_infant <- ca_childcare |>
  filter(study_year == "2018") |>
  group_by(region) |>
  summarise(median_mc_infant = median(mc_infant, na.rm = TRUE)) |>
  slice_min(median_mc_infant)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1
#Lab 9, Question 2

proportions_df <- proportions_df |>
  count(ncorrect) |>
  mutate(proportion = n / sum(n)) |>
  select(ncorrect, proportion) |>
  pivot_wider(names_from = ncorrect, 
              values_from = proportion,
              names_prefix = "correct_") 

proportions_table <- proportions_df |>
  gt() |>
  cols_label(
    correct_0 = "None Correct",
    correct_1 = "One Correct",
    correct_2 = "Two Correct",
    correct_4 = "All Correct"
  ) |>
  tab_header(
    title = "Frequency of Correct Baby Matches",
    subtitle = "(Out of 4 babies)"
  ) |>
  fmt_percent() |>
  tab_style(
    style = cell_text(
      size = 14,
      align = "center"
    ),
    locations = cells_body()
  ) |>
  tab_style(
    style = cell_text(
      align = "center"
    ),
    locations = cells_column_labels()
  )

proportions_table
```

-   Example 2

```{r}
#| label: dvs-6-2
# Lab 8, Question 4 

missing_values <- fish |>
  map_int(~ sum(is.na(.)))

kable(missing_values,
      col.names = c("Variable", "Number of Missing Values"),
      align = "c")

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1
#Lab 9, Question 2

proportions_df <- proportions_df |>
  count(ncorrect) |>
  mutate(proportion = n / sum(n)) |>
  select(ncorrect, proportion) |>
  pivot_wider(names_from = ncorrect, 
              values_from = proportion,
              names_prefix = "correct_") 

proportions_table <- proportions_df |>
  gt() |>
  cols_label(
    correct_0 = "None Correct",
    correct_1 = "One Correct",
    correct_2 = "Two Correct",
    correct_4 = "All Correct"
  ) |>
  tab_header(
    title = "Frequency of Correct Baby Matches",
    subtitle = "(Out of 4 babies)"
  ) |>
  fmt_percent() |>
  tab_style(
    style = cell_text(
      size = 14,
      align = "center",
      font = "Helvetica",
    ),
    locations = cells_body()
  ) |>
  tab_style(
    style = cell_fill(
      color = "bisque"
    ),
    locations = cells_body()
  ) |>
  tab_style(
    style = cell_fill(
      color = "gray"
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_text(
      color = "white",
      font = "Helvetica"
    ),
    locations = cells_column_labels()
  )

proportions_table

#revised to be more creative!
```

-   Example 2

```{r}
#| label: dvs-7-2
#Lab 8, Quesiton 4

missing_values <- fish |>
  map_int(~ sum(is.na(.)))


missing_values_df <- tibble(
  Variable = names(missing_values),
  `Number of Missing Values` = missing_values
)


missing_values_table <- missing_values_df |>
  gt() |>
  cols_label(
    Variable = "Variable",
    `Number of Missing Values` = "Number of Missing Values"
  ) |>
  tab_header(
    title = "Missing Values in Fish Dataset"
  ) |>
  tab_style(
    style = cell_text(
      weight = "bold",  # Make the title bold
      align = "center"
    ),
    locations = cells_title()
  ) |>
  tab_style(
    style = cell_text(
      size = 14,
      align = "center"
    ),
    locations = cells_body()
  ) |>
  tab_style(
    style = cell_text(
      align = "center",
      color = "white"
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_fill(color = "yellow"),
    locations = cells_body(rows = 4)
  )

missing_values_table

#Revised to be creative!
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
#Lab 5, Finding who hired initial suspect

facebook_event_checkin |>
  left_join(person,
             by = join_by(person_id == id)
             ) |>
  inner_join(drivers_license,
             by = join_by(license_id == id )
              ) |>
  filter(hair_color == "red",
           car_make == "Tesla",
           car_model == "Model S",
           event_name == "SQL Symphony Concert") 
```

-   `across()`

```{r}
#| label: pe-1-across
#Lab 3, Quesiton 5

teacher_evals_clean <- evals|>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    across(c(teacher_id, 
             question_no, 
             seniority), 
           as.character)
            ) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority, 
         sex)
```

-   `map()` functions

```{r}
#| label: pe-1-map-1
#Lab 8, Question 2

result <- surveys |>
  map_at(.at = c("teacher_id",
                 "weekday",
                 "academic_degree",
                 "seniority",
                 "gender"),
         .f = as.character) |>
  bind_cols()

kable(result[1:20, ], col.names = gsub("[_]", " ", names(result)), 
      align = "c") |>
  kable_styling(font_size = 14, 
                            position = "center")


```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1
# Challenge 7, Question 3

condition_index <- function(weight, length) {
  if(!is.numeric(weight) | !is.numeric(length)) {
    stop("Error: Weight and Length must be numeric values")
  }
  CI <- (weight / (length^3)) * 100
  return(CI)
}

#Revised to only use one bar in my if() statement, whereas previously I had a double bar. A single bar is in better alignment with the logic I am trying to execute. 
```

-   Function that operates on data frames

```{r}
#| label: pe-2-2
#Created a function for Lab 4

flag_high_childcare_costs <- function(df, threshold) {
  df |>
    dplyr::mutate(
      high_unr_16 = ifelse(unr_16 > threshold, 1, 0),
      high_funr_16 = ifelse(funr_16 > threshold, 1, 0),
      high_munr_16 = ifelse(munr_16 > threshold, 1, 0)
    )
}

#Becuase of plagerism on Lab 7, I decided to create a funciton that operates on data frames on Lab 4. This function flags if the unemployment rate across the population that is aged 16 years or older is greater than a given threshold. 
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across
#Lab 3, Question 5

teacher_evals_clean <- evals|>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    across(c(teacher_id, 
             question_no, 
             seniority), 
           as.character)
    ) |>
  select(course_id, 
         teacher_id, 
         question_no,
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree,
         seniority, 
         sex)
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1
#Lab 8, Question 1

surveys_types <- map_chr(surveys, ~ class(.x))

kable(data.frame(
  data_type = surveys_types), 
  col.names = c("Variable Name", "Data Type"),
  align = "c")
```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2
#Lab 9, Question 6

all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n, df), 
                                .f = simulate_means)
         ) |> 
  unnest(simulated_means) 

#Revised from original submission in order to attempt the optional portion.
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
#Lab 3, Question 7

teacher_evals_clean |>
   filter(if_any(everything(), is.na))
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4, Question 6

ca_childcare |> 
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "care_type",
               values_to = "median_price") |>
  mutate(
    care_type = fct_relevel(care_type, "mc_infant", "mc_toddler", "mc_preschool")
  ) |>
 ggplot(mapping = aes(x = study_year, 
                      y = median_price,
                      color = fct_reorder2(.f = region,
                                          .x = study_year,
                                          .y = median_price), 
                                          group = region)) +
  geom_point() +
  geom_smooth() +
  facet_grid(~ care_type,labeller = as_labeller(c("mc_infant" = "Infants",
                                                  "mc_toddler" = "Toddlers",
                                                  "mc_preschool" = "Preschool"))) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2), 
                     labels = seq(2008, 2018, by = 2)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = NULL,
    color = "Region"
  ) +
theme_bw() +
  theme(
    text = element_text(size = 8),         
    strip.text = element_text(size = 9),   
    legend.text = element_text(size = 7),  
    legend.title = element_text(size = 10),
    aspect.ratio = 1)

#Revised. Reodered facets and legend using fct_reorder2() and fct_relevel(). Eliminated intermediate objects so that it is one pipeline. Also, used ChatGPT to problem solve errors while using colorRampPalette(). [https://chatgpt.com/share/67560470-673c-800e-9d04-d64f9c58f50a]
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1
#Lab 9, Question 1

randomBabies <- function(nBabies){
  assigned <- sample(1:nBabies, 
                     nBabies, 
                     replace = FALSE)
   sum(assigned == 1:nBabies)
}

results <- map_int(.x = 1:10000,
                   .f = ~randomBabies(4)
                   )
```

-   Example 2

```{r}
#| label: dsm-1-2
#Lab 9, Question 4

simulate_means <- function(n, df){
  map_dbl(.x = 1:n, 
          .f = ~rchisq(n = 100, df = df) %>% mean()
          )
}

#Revised from original submission in order to attempt the optional portion.
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
#Lab 2, Question 17

species_mod <- aov(lm(weight ~ species, data = surveys))

summary(species_mod)
```

-   Example 2

```{r}
#| label: dsm-2-2
#Challenge 3 Question 3

chisq.test(teacher_evals_compare$sen_level, teacher_evals_compare$SET_level)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

My thinking regarding R and statistical computation has become much more centered around efficiency. Most of my feedback across my labs and challenges have been related to efficiency or format, and I have worked in my prior revisions as well as throughout this portfolio to make my code as efficient as possible. There are a few sections in my final portfolio where I applied recent concepts to older labs and assignments in order to demonstrate my understanding of the concept. This required me to revise my previous approach, or look for ways to implement these concepts. I've submitted revisions for all assignments, with an exception of 2 assignments that I was not permitted to revise. These revisions helped me learn from mistakes or inefficient approaches, and take initiative to apply those changes in future assignments.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

My thinking has extended a lot during this class! This is because I thought I had a good grasp of R functions before entering this class, to learn that I had barely tipped the iceberg of everything that is possible in R. I've extended my thinking because rather than defaulting to the inefficient methods that I was comfortable with prior to this class, I have been open minded in learning to be proficient in these amazing tools! The challenges included in this portfolio were highly beneficial in pushing myself, but they also enhanced my understanding of concepts as I applied them in a more advanced way. I did not often have the opportunitiy to attempt the optional portion of labs and assignmetns throughout the quarter due to other time committments and classes, but I'm glad I was able to now attempt some of them in this portfolio. I make efforts to push myself and succeed, especially with data analysis being my ideal career path.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

Here is a copy-paste of feedback that I'm proud of from my Lab 9 Peer Review.

"Hi Aakash! Your code was very easy for me to follow, especially since you made a new line after every pipe, and mostly after each comma! Great job! One thing that I noticed is that your bar graph is showing a proportion of .25 across n, which doesn't align with your findings in your table. I was having this same issue! This happens because your data is already aggregated in pivot_longer, so stat = "count" treats these as raw data points. Instead, I used stat = "identity". Additionally, an area of improvement could be being strategic with the colors used in your tables! In problem 7, the bright red and green was a bit hard on my eyes with the white text as well. I like how you wanted to use contrasting colors, but maybe using slightly less bright of colors will make it easier for the viewer! Overall great job!"

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

I grew as a collaborator by being open-minded and taking approaches to problems that I would initially think are "wrong". Rather than rejecting an idea because I don't think it will work, I've learned to still try them. I've learned that there are several ways to approach a problem, and that every step and trial-and-error is a step closer to the answer. Many times, the approach that I would initially think is wrong would give us close to what we want! From there, we would reverse engineer our approach in order to completely get the right result. I think these activities have made me a better collaborator and a more open-minded person!
